#!/bin/bash

# color
RED="\\e[31m" 
GREEN="\\e[32m" 
YELLOW="\\e[33m" 
BLACK="\\e[0m" 
POS="\\e[60G" 

ROOT=~/Desktop/

# log
ok_msg(){ 
    echo -e "${1}[ OK ]"
} 

failed_msg(){ 
    echo -e "${1}[ FAILED ]"
}

# set variable $fcgi_pid 
# 0, if process exists. 
# 1, error. 
check_process() {
    # get pid
    fcgi_pid=`ps -A |grep fcgi |awk 'NR==1 {print $1}'`
    
    # check pid
    if [[ -z $fcgi_pid ]]; then return 1; fi

    ps -p ${fcgi_pid} >/dev/null;
    return $?
}


start() { 
    # if exists, exit. 
    check_process
    if [[ 0 -eq $? ]]; then 
        failed_msg "mocal started(pid ${fcgi_pid}), should not start it again." 
        return 0 
    fi 
    
    # not exists, start server 
    ok_msg "Starting mocal..."
    old_pwd=`pwd`;
    cd ${ROOT};
    nohup ./workshop/mocal/flaskr.fcgi &
    cd ${old_pwd}

    # wait for some time. 
    sleep 3 

    # check again after start server 
    check_process
    echo $?
    if [[ 0 -eq $? ]]; then 
        ok_msg "mocal started(pid ${adapter_pid})" 
    else 
        failed_msg "mocal not started" 
    fi 
}

stop() {
    # not start, exit
    check_process
    if [[ 1 -eq $? ]]; then
        failed_msg "mocal not start."
        return 0
    fi

    ok_msg "Stopping mocal(pid ${fcgi_pid})..."

    # process exists, kill util stop
    for((;;)); do
        check_process
        if [[ 0 -eq $? ]]; then
            kill -9 ${fcgi_pid} 2>/dev/null
            ret=$?; if [[ 0 -ne $ret ]]; then failed_msg "send signal SIGKILL failed ret=$ret";return $ret;fi
            sleep 0.1

        else
            ok_msg "mocal stopped"
            break;

        fi
    done

    sleep 0.1
}

status() {
    check_process
    if [[ 0 -eq $? ]]; then
        echo "mocal(pid ${fcgi_pid}) is running."
        return 0

    else
        echo "mocal is stopped"
        return 1
    fi
}

menu() {
    case "$1" in
        start)
            start ;;
        stop)
            stop ;;
        restart)
            stop
            start ;;
        status)
            status ;;
        *)
            echo "Usage: $0 {start|stop|status|restart}"
            return 1 ;;
    esac
}

menu $1
code=$?
#echo "code=${code}"
exit ${code}


